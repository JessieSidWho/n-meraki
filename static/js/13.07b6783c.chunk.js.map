{"version":3,"sources":["components/ContactForm/useForm.js","components/ContactForm/validationRules.js","components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["init","useForm","validate","useState","name","email","message","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","type","Object","keys","length","notification","description","handleChange","event","persist","target","value","handleSubmit","preventDefault","template_params","emailjs","then","response","err","console","log","test","ContactContainer","styled","div","Contact","section","FormGroup","form","Span","span","ButtonContainer","Block","lazy","Input","Button","TextArea","withTranslation","title","content","id","t","ValidationType","ErrorMessage","cascade","justify","align","lg","md","sm","padding","autoComplete","onSubmit","placeholder","onChange"],"mappings":"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","file":"static/js/13.07b6783c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport * as emailjs from 'emailjs-com';\nimport{ init } from 'emailjs-com';\ninit(\"user_7ZV1WpoPHqltcFp8Y4l72\");\n\nconst useForm = (validate) => {\n\n  const [values, setValues] = useState({name: '', email:'', message:''});\n  const [errors, setErrors] = useState({name:'', email:'', message:''});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = (type) => {\n    notification[type]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    let template_params = {\n      \"name\": values.name,\n      \"email\": values.email,\n      \"message\": values.message\n   }\n   \n   let service_id = \"service_581gpzm\";\n   let template_id = \"template_Nara_Meraki\";\n\n    setErrors(validate(values));\n    if (Object.keys(values).length === 3) {\n      emailjs.send(service_id, template_id, template_params)\n      .then((response) => {\n         setShouldSubmit(true);\n        //  console.log(values);\n        //  console.log('SUCCESS!', response.status, response.text);\n      }, (err) => {\n         console.log('FAILED...', err);\n      });\n    }\n\n    values.name = \"\";\n    values.email = \"\";\n    values.message = \"\";\n\n    event.target[0].value = '';\n    event.target[1].value = '';\n    event.target[2].value = '';\n\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon(\"success\");\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n\nexport default useForm;\n","export default function validate(values) {\n  let errors = {};\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled.div`\n  padding: 5rem 0;\n`;\n\nexport const Contact = styled.section`\n  position: relative;\n  width: 100%;\n  max-width: 1280px;\n`;\n\nexport const IconContainer = styled.div`\n  @media only screen and (min-width: 980px) {\n    padding: 10rem 7rem;\n  }\n`;\n\nexport const FormGroup = styled.form`\n  width: 100%;\n  max-width: 520px;\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled.span`\n  display: block;\n  font-family: 'Ubuntu', sans-serif;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled.div`\n  text-align: end;\n  position: relative;\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { lazy } from \"react\";\nimport { Row, Col } from \"antd\";\nimport Zoom from \"react-reveal/Zoom\";\nimport { withTranslation } from \"react-i18next\";\n\nimport useForm from \"./useForm\";\nimport validate from \"./validationRules\";\n\nimport * as S from \"./styles\";\n\nconst Block = lazy(() => import(\"../Block\"));\nconst Input = lazy(() => import(\"../../common/Input\"));\nconst Button = lazy(() => import(\"../../common/Button\"));\nconst TextArea = lazy(() => import(\"../../common/TextArea\"));\n\nconst Contact = ({ title, content, id, t }) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }) => {\n    const ErrorMessage = errors[type];\n    return errors[type] ? (\n      <Zoom cascade>\n        <S.Span>{ErrorMessage}</S.Span>\n      </Zoom>\n    ) : (\n      <S.Span />\n    );\n  };\n\n  return (\n    <S.ContactContainer id={id}>\n      <S.Contact>\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\n          <Col lg={12} md={11} sm={24}>\n            <Block padding={true} title={title} content={content} />\n          </Col>\n          <Col lg={12} md={12} sm={24}>\n            <S.FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  // id=\"Name\"\n                  placeholder=\"Your Name\"\n                  value={values.name}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  // id=\"Email\"\n                  placeholder=\"Your Email \"\n                  value={values.email}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message}\n                  name=\"message\"\n                  // id=\"Message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <S.ButtonContainer>\n                <Button name=\"submit\" type=\"submit\">\n                  {t(\"Submit\")}\n                </Button>\n              </S.ButtonContainer>\n            </S.FormGroup>\n          </Col>\n        </Row>\n      </S.Contact>\n    </S.ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"sourceRoot":""}